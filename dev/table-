// Table.tsx
"use client";
import React, {useState} from 'react';
import Pagination from './table_pagination';

type ColumnConfig<T> = {
    header: string;
    key: keyof T;
    render: (item: T, isEditing: boolean, onValueChange: (value: any) => void) => React.ReactNode;
};

type TableProps<T> = {
    data: T[];
    columns: ColumnConfig<T>[];
    onEdit?: (item: T) => void;
    onDelete?: (item: T) => void;
    onAdd?: () => void;
};

function Table<T extends { id: string | number }>({data, columns, onEdit, onDelete, onAdd}: TableProps<T>) {
    const [editingItemId, setEditingItemId] = useState<T['id'] | null>(null);
    const [editingColumnKey, setEditingColumnKey] = useState<keyof T | null>(null); // Track editing column
    const [editedValues, setEditedValues] = useState<Partial<T>>({});
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(100);

    const handleDoubleClick = (item: T, columnKey: keyof T) => {
        setEditingItemId(item.id);
        setEditingColumnKey(columnKey); // Set the column being edited
    };

    const handleSaveClick = () => {
        if (editingItemId && onEdit && editingColumnKey) {
            const updatedItem = {...data.find(item => item.id === editingItemId), ...editedValues};
            onEdit(updatedItem as T);
        }
        setEditingItemId(null);
        setEditingColumnKey(null); // Reset editing column
    };

    const handleValueChange = (key: keyof T, value: any) => {
        setEditedValues(prev => ({...prev, [key]: value}));
    };

    // Handle change in items per page from dropdown
    const handleItemsPerPageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
        setItemsPerPage(Number(event.target.value));
        setCurrentPage(1); // Reset to first page to avoid viewing an empty page
    };

    const paginatedData = data.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

    return (
        // Container for the table and pagination
        <div className="flex flex-col h-full">
            <div className="overflow-auto flex-grow">
                <table className="min-w-full divide-y divide-gray-300">
                    <thead className="sticky top-0 z-30 bg-white shadow-sm"> {/* Add box-shadow */}
                    <tr>
                        {columns.map((column, index) => (
                            <th key={index} className="sticky top-0 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 bg-white">
                                {column.header}
                            </th>
                        ))}
                    </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                    {paginatedData.map(item => (
                        <tr key={item.id}>
                            {columns.map((column, index) => (
                                <td key={index}
                                    className="whitespace-nowrap px-3 py-0 text-sm text-gray-500 relative hover:bg-gray-100 hover:border-blue-500"
                                    style={{
                                        transition: 'all 0.1s ease',
                                        padding: '0.75rem',
                                        boxSizing: 'border-box'
                                    }} // Ensure box-sizing is border-box
                                    onDoubleClick={() => handleDoubleClick(item, column.key)}
                                    // onMouseEnter={(e) => e.currentTarget.style.border = '1px solid blue'}
                                    // onMouseLeave={(e) => e.currentTarget.style.border = 'none'}
                                >
                                    {item.id === editingItemId && editingColumnKey === column.key ? (
                                        <input
                                            type="text"
                                            value={editedValues[column.key] ?? item[column.key]}
                                            onChange={(e) => handleValueChange(column.key, e.target.value)}
                                            className="text-sm text-gray-500 absolute inset-0 w-full h-full" // Absolute positioning to overlay the cell
                                            style={{
                                                padding: '0.75rem', // Match padding
                                                border: 'none', // Remove border or make it the same as td
                                                boxSizing: 'border-box', // Ensure box-sizing is border-box
                                                lineHeight: 'normal', // Ensure line height is consistent
                                                height: '100%', // Fill the cell height
                                            }}
                                            autoFocus
                                            onBlur={handleSaveClick} // Save on blur
                                        />
                                    ) : (
                                        column.render(item, item.id === editingItemId && editingColumnKey === column.key, value => handleValueChange(column.key, value))
                                    )}
                                </td>
                            ))}
                        </tr>
                    ))}
                    </tbody>
                </table>
                <div className="sticky bottom-0 bg-white"> {/* Sticky pagination at the bottom */}
                    <Pagination
                        currentPage={currentPage}
                        totalItems={data.length}
                        itemsPerPage={itemsPerPage}
                        onPageChange={setCurrentPage}
                        onItemsPerPageChange={handleItemsPerPageChange}
                    />
                    {onAdd && (
                        <button onClick={onAdd}>Add</button>
                    )}
                </div>
            </div>

        </div>
    );
}

export default Table;
